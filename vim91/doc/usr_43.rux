*usr_43.txt*	для Vim version 9.1		   редакция от 24 окт 2015 г.

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			     автор Брам Моленар

		      Работа с различными типами файлов


При редактировании файла определённого типа, например программы на языке Си
или командных файлов командной оболочки, для них, как правило, применяются
одни и те же настройки и клавиатурные команды. А каждый раз устанавливать это
всё вручную занятие неблагодарное и утомительной. В этой главе рассказывается
как делать это автоматически.

|43.1|	Модули для типа файла
|43.2|	Добавление нового типа файла

 Следующая глава «Собственные правила подсветки синтаксиса», |usr_44.txt|.
Предыдущая глава «Создание и изменение пунктов меню», |usr_42.txt|.
      Содержание, |usr_toc.txt|.

==============================================================================
*43.1*	Модули для типа файла				*filetype-plugin*

Как начать использовать модули для типов файлов уже подробно обсуждалось нами
здесь — |add-filetype-plugin|. Однако, настройки по умолчанию, как правило,
сведены к минимуму, поэтому наверняка захочется подстроить их под свои нужды.
Например, для программ на языке Си может понадобиться установить значение
параметра 'softtabstop' равным четырём и определить клавиатурную команду,
которая вставляет трёхстрочный комментарий. Следующая пара шагов поможет
сделать это.

							*your-runtime-dir*
1. Создайте свой собственный каталог для файлов настроек. В UNIX-подобных
   системах это обычно ~/.vim. В этом каталоге создайте каталог «ftplugin»:
>
	mkdir ~/.vim
	mkdir ~/.vim/ftplugin
<
   Если используемая система не UNIX-подобная, то посмотрите значение
   параметра 'runtimepath', чтобы узнать в каких каталогах редактором Vim
   выполняется поиск каталога «ftplugin»
>
	set runtimepath
<
   Лучше всего использовать самый первый каталог из этого списка значений (до
   первой запятой). Если не устраивает значение по умолчанию, то добавьте
   необходимое наименование каталога в параметр 'runtimepath' в файле |vimrc|.

2. Создайте файл «~/.vim/ftplugin/c.vim» со следующим текстом:
>
	setlocal softtabstop=4
	noremap <buffer> <LocalLeader>c o/**************<CR><CR>/<Esc>
	let b:undo_ftplugin = "setl softfabstop< | unmap <buffer> <LocalLeader><"
<
После этих действий начните редактировать в этом буфере программу на языке Си.
Обратите внимания, что сейчас для параметра 'softtabstop' установлено значение
равное четырём. Но если открыть в другом буфере ещё один файл на языке Си, то
значение этого параметра будет сброшено к начальному значении, как правило,
это ноль. Связано это с тем, что при создании нашего файла мы использовали
команду ":setlocal", которая задаёт значение параметра 'softtabstop' только
для данного буфера. При редактировании другого буфер, значение этого параметра
будет установлено в соответствии с принятыми условиями для нового буфера, то
есть значение по умолчанию, либо в значение, установленное последней командой
":set".

Тоже самое относится и к клавиатурной команде для «\c», она перестанет
работать при редактировании другого буфера. Команда ":map <buffer>" создаёт
клавиатурную команду, которая является локальной по отношению к данному
буферу. Это применимо к любой команде для создания клавиатурной команды —
":map!", ":vmap" и т. п. Спецсимвол |<LocalLeader>| в клавиатурной команде
заменяется значением переменной «maplocalleader».

Строка для установки переменной «b:undo_ftplugin» предназначена на тот случай,
когда для этого типа файла уже заданы другие значения. Возможно, что в этом
случае потребуется отменить собственные настройки. Переменная «b:undo_ftplugin»
будет выполнена в виде команды. При задании этой переменной обращайте внимание
на символы со специальным значением внутри строки, такие как обратная
наклонная черта.

Примеры модулей типов файлов можно найти в каталоге
>
	$VIMRUNTIME/ftplugin/
<
Подробнее о создании модуля типа файла можно прочитать здесь — |write-plugin|.

==============================================================================
*43.2*	Добавление нового типа файла

Возможно, что для редактирования будет открыт файл, тип которого ещё
не распознаётся в редакторе Vim. Что же давайте попробуем настроить редактор
так, чтобы он распознавал этот тип файла.
Прежде всего выясните какой каталог используется для файлов с описанием типов
файлов, как это сделать, говорилось выше — |your-runtime-dir|.

Создайте файл «filetype.vim», который содержит автокоманду для определения и
присвоения этого типа файла (автокоманды описываются в параграфе |40.3|.).
Например,
>
	augroup filetypedetect
	au BufNewFile,BufRead *.xyz	setf xyz
	augroup END
<
Здесь назначается тип файла как «xyz» для всех файлов с расширением «.xyz».
По команде ":augroup" данная автокоманда буде помещена в группу
«filetypedetect». Группирование автокоманд для назначения типов файлов в
единую группу позволяет одновременно отключать такие автокоманды по команде
":filtetype off".
По команде ":setf" присваивается значение параметру 'filetype' равным
указанному аргументу только в том случае, если такое значение ещё не было
установлено.
Это позволяет избежать повторного присвоения значения параметру 'filetype'.

В автокомандах допускается использование различных шаблонов для сопоставления
файла с требуемым наименованием файла, в том числе могут учитываться и
наименования каталогов. Подробнее см. в параграфе с |autocmd-patterns|.
Предположим, что все файлы в каталоге «/usr/share/scripts/» являются файлами
на языке программирования Ruby, хотя и не имеют стандартного для него
расширения файла. В этом случае изменим предыдущий пример следующим образом:
>
	augroup filetypedetect
	au BufNewFile,BufRead *.xyz			setf xyz
	au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
	augroup END
<
Но что делать, если потребуется отредактировать файл
«/usr/share/scripts/README.txt», тип которого, конечно же, не является файлом
на языке Ruby. Это как раз одна из неприятностей, когда в шаблоне используется
метасимвол '*', который соответствует вообще любому файлу.
Одним из решением такой задачи является размещение нашего файла «filetype.vim»
в другом каталоге, в том, который находится в самом конце перечня значений
параметра 'runtimepath'. Например для UNIX-подобных систем это может быть
«~/.vim/after/filetype.vim».

К тому же определение типа текстового файла будем выполнять в другом командном
файле типов файла, который поместим в каталог, обрабатываемый раньше, чем
каталог «after», например, «~/.vim/filetype.vim»
>
	augroup filetypedetect
	au BufNewFile,BufRead *.txt			setf text
	augroup END
<
А тип файлов языка Ruby будет определяться в самом конце, в файле находящемся
в «~/.vim/after/filetype.vim»
>
	augroup filetypedetect
	au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
	augroup END
<
Давайте разберёмся что будет происходить в данном случае.
В редакторе Vim выполняется поиск файла «filetype.vim» в каждом каталоге,
который перечислен в значении параметра 'runtimepath' в том порядке, как они
указаны. И первым будет обнаружен «~/.vim/filetype.vim». А именно в этом файле
мы задали определение для текстового типа файла с расширением «.txt». Далее
продолжается поиск файла «filetype.vim» в каталоге, определённом в переменной
окружения $VIMRUNTIME (это основной каталог для редактора Vim). После
обработки файла из этого каталога просмотр каталогов продолжается и очередь
доходит до «~/.vim/after/filetype.vim». Обработав этот файл, будут добавлены
автокоманды для типа файла Ruby в каталоге «/usr/share/scripts».

Необходимо обратить внимание, что обработка автокоманд для определения типов
файлов выполняются в порядке их считывания. То есть первой будет обработана
самая первая из найденных автокоманд, потом следующая и так далее.
Из этого следует следующее. При редактировании файла
«/usr/share/scripts/README.txt» соответствие шаблону «.txt» было определено
одним из первых в файле «~/.vim/filetype.vim», то будет задан текстовый тип
файла для «README.txt». Однако также выясняется, что здесь применим и шаблон
«/usr/share/scripts/*» для типа файлов Ruby, и выполняется команда
":setf ruby". Поскольку для файла «README.txt» значение параметра 'filetype'
уже установлено, то для него эта команда игнорируется, но применяется для всех
остальных файлов в этом каталоге.

При редактировании файлов в каталоге «/usr/share/scripts/foobar» применяются
те же самые автокоманды. Поскольку шаблон применим только для типа файла Ruby,
то команда "setf ruby" устанавливает значение параметра 'filetype' равным ruby.


РАСПОЗНАВАНИЕ ПО СОДЕРЖИМОМУ ФАЙЛА

Если тип файла нельзя распознать по его наименованию, то можно попробовать
распознать тип файла по содержимому файла! Например, многие командные файлы
начинаются со строки, похожей на

    #!/bin/xyz ~

Для распознавания такого командного файла создайте в каталоге настроек
редактора Vim (тот же каталог, где находится файл «filetype.vim») файл
«scripts.vim». Содержимое этого файла может быть таким:
>
	if did_filetype()
	  finish
	endif
	if getline(1) =~ '^#!.*[/\\]xyz\>'
	  setf xyz
	endif
<
Вызов функции «did_filetype()» выполняется для того, чтобы исключить проверку
содержимого файлов, тип которых уже был определён по их наименованию. Это
позволяет сократить время обработки командных файлов, тем более, что в этом
случае действие команды ":setf" всё равно будет игнорироваться.

Вызов файлов «scripts.vim» будет выполнен автокомандой из стандартного файла
«filetype.vim». Таким образом, порядок установки типов файлов следующий:

	1. файлы filetype.vim в каталогах из параметра 'runtimepath',
	    указанных до $VIMRUNTIME;
	2. обработка первой части файла $VIMRUNTIME/filetype.vim;
	3. все файлы scripts.vim в каталогах из параметра 'runtimepath';
	4. обработка оставшейся части файла $VIMRUNTIME/filetype.vim;
	5. файлы filetype.vim в каталогах из параметра 'runtimepath',
	    указанных после $VIMRUNTIME.

Если этого недостаточно, то добавьте автокоманду, шаблон которой соответствует
всем файлам и запускает командный файл или вызывает функцию, которые проверяют
содержимое файла.

==============================================================================

Следующая глава «Собственные правила подсветки синтаксиса», |usr_44.txt|.
Об авторских правах на документацию см. |manual-copyright|.

© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

 vim:tw=78:ts=8:noet:ft=help:norl:
