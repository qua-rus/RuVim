*usr_50.txt*	для Vim version 9.1		   редакция от 20 июн 2022 г.

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

	      Расширенные возможности командных файлов Vim


|50.1|	Обработка исключительных ситуаций
|50.2|	Функции с переменным количеством аргументов
|50.3|	Восстановление окружающего вида

 Следующая глава «Создание подключаемых модулей редактора», |usr_51.txt|.
Предыдущая глава «Региональные настройки», |usr_45.txt|.
      Содержание, |usr_toc.txt|.

==============================================================================
*50.1*	Обработка исключительных ситуаций

Чтобы понять о чём идёт речь, приведём простой пример
>
	try
	   read ~/templates/pascal.tmpl
	catch /E484:/
	   echo "Не удалось найти шаблонный файл языка Pascal."
	endtry
<
Ожидаемое исполнение команда ":read" не будет корректно выполнено, если
требуемый файл не существует. И вот здесь, вместо того, чтобы выдать сухое
стандартное сообщение об ошибке, приведённый выше фрагмент перехватывает
возникающую нестандартную ситуацию и предоставляет пользователю развёрнутое и
понятное сообщение.

Все команды расположенные между командами ":try" и ":endtry" вместо генерации
стандартных ошибок будут обработаны как состояние исключительной ситуации.
Описание исключительная ситуация является обычной строкой. В случае
нестандартной ситуации, такой строкой является развёрнутое сообщение об ошибке.
Каждое стандартное сообщение об ошибке имеет свой уникальный признак
(идентификатор). В данном случае, мы перехватываем ошибку, сообщение о которой
содержит символы «E484:». Этот номер не изменится даже в том случае, если
изменится само сообщение об ошибке, — например, оно может быть переведено на
другой язык.

Помимо возможности вывести понятное сообщение об ошибке, редактором Vim
предоставляется возможность исполнить команды после команды ":endtry". Что
гарантирует полную обработку нестандартной ситуации. В противном случае при
обнаружении неперехваченной ошибки, выполнение командного файла или функции
будет прервано.

Если выполнение команды ":read" приведёт к какой-либо другой ошибке, то шаблон
«E484:» не будет ей соответствовать. В результате, возникшая исключительная
ситуация не будет обработана, и будет выдано стандартное сообщение об ошибке и
прерывание дальнейшей обработки

В случае, если нет полного понимания механизма перехвата исключительных
ситуаций, может возникнуть соблазн сделать следующее
>
	try
	   read ~/templates/pascal.tmpl
	catch
	   echo "Не удалось найти шаблонный файл языка Pascal."
	endtry
<
В этом случае будут перехватываться вообще все возможные ошибки. Однако, в
этом случае возникает ситуация, когда будут пропущены действительно полезные
сообщение об ошибках, указывающие на совершенно иные причины неисправностей,
например,
    E21: Буфер не может быть изменён. Не установлен параметр 'modifiable' ~

Ещё одним полезным решением таких ситуаций может быть команда ":finally"
>
	var tmp = tempname()
	try
	   exe ":.,$write " .. tmp
	   exe "!filter " .. tmp
	   :.,$delete
	   exe ":$read " .. tmp
	finally
	   delete(tmp)
	endtry
<
Пример этого фрагмента кода демонстрирует, что чтобы не произошло между
командами ":try" и ":finally" независимо от результат выполнении некой
фильтрации буфера от позиции каретки до завершения файла, даже принудительное
прерывание по клавиатурной команде CTRL-C, команда «delete(tmp)» будет
исполнена в любом случае, что гарантирует удаление временного файла и
отсутствие мусорного заполнения файловой системы при исполнении функций.

Команда ":finally" не перехватывает исключительные ситуации, возникновение
ошибки всё равно приведёт к прерыванию дальнейшего исполнения кода.

Более подробно об обработке исключительных ситуаций можно прочитать в
справочнике — |exception-handling|.

==============================================================================
*50.2*	Функции с переменным количеством аргументов

В редакторе Vim реализован механизм определения функций с переменным
количеством аргументов.
Например, следующая команда определяет функцию, которая должна иметь один
обязательный аргумент (start) и указать до 20 дополнительных аргументов >
>
	def Show(start: string, ...items: list<string>)
<
Переменная «items» в функции является списком, содержащем дополнительные
аргументы. Такая организация аргументов позволяет использовать её как любой
другой список. Например,
>
	def Show(start: string, ...items: list<string>)
	  echohl Title
	  echo "start is " .. start
	  echohl None
	  for index in range(len(items))
	    echon $"  Arg {index} is {items[index]}"
	  endfor
	  echo
	enddef
<
Вызов подобных функций осуществляется следующим образом
>
	Show('Title', 'one', 'two', 'three')
<
Аргументы «Title» является параметром start. Аргумент № 0 — «one», аргумент
№ 1 — «two», аргумент № 3 — «three».

В этой функции используется команда ":echohl" как определение подсветки для
последующей команды ":echo". По команде ":echohl None" отменяется указанный
режим подсветки. По команде ":echon" выполняются те же действия как по команде
":echo", но не выполняется перенос строки.

При вызове этой функции только с аргументом «items», то список будет содержать
пустые значения. В этом случае функция range(len(items)) вернёт индексы,
обрабатываемые циклом «for», смысл этих действий будет объяснён далее.

==============================================================================
*50.3*	Восстановление окружающего вида

Порой может возникнуть необходимость переместить каретку в какое‐то место,
выполнить там изменения и затем вернуться в прежнее место с сохранением ранее
имеющегося состояния окружения. Допустим, для правки чего‐то в заголовке
файла. Такие действия возможно выполнить с помощью двух следующих функций:
>
	var view = winsaveview()
	# Перемещаем каретку и делаем изменения
	winrestview(view)

==============================================================================

Следующая глава «Создание подключаемых модулей редактора», |usr_51.txt|.
Об авторских правах на документацию см. |manual-copyright|.

© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

 vim:tw=78:ts=8:noet:ft=help:norl:
