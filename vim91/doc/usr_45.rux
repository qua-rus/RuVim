*usr_45.txt*	для Vim version 9.1		   редакция от 13 мая 2022 г.

		    РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ РЕДАКТОРУ VIM
			      автор Брам Моленар

			    Региональные настройки


В редакторе Vim реализована возможность по отображению сообщений на различных
языках. В этой глава объясняется как настроить вывода сообщений на требуемом
язык. А также даются разъяснения по работе с файлами, имеющими различные
кодировки текста и язык, и какие операции необходимо выполнить для этого.

|45.1|	Язык сообщений
|45.2|	Язык меню
|45.3|	Использование других кодировок
|45.4|	Редактирование файлов в другой кодировке
|45.5|	Ввод текста на других языках

 Следующая глава «Расширенные возможности командных файлов Vim», |usr_50.txt|.
Предыдущая глава «Собственные правила подсветки синтаксиса», |usr_44.txt|.
      Содержание, |usr_toc.txt|.

==============================================================================
*45.1*	Язык сообщений

При запуске редактора Vim выполняется анализ среды окружения для определения
используемого языка в системе и пользователем. В большинстве случаев это
удаётся выяснить и тогда сообщения программы будут выводиться на
предпочитаемом языке пользователя (если, конечно, в комплект редактора включён
перевод этих сообщений). Чтобы просмотреть текущий язык, который определил
редактор Vim, введите следующую команду
>
	:language
<
Если вывод команда будет «C», то значит будет использоваться язык по умолчанию,
то есть английский.

    Примечание.
    Доступность использование различных языков возможна только в том случае,
    если редактор Vim был собран с поддержкой других языков. Чтобы узнать это,
    наберите команду ":version" и проверьте наличие компонентов "+gettext" и
    "+multi_lang". Если эти компоненты включены, то редактор поддерживает
    другие языки. Если в выводе команды будет указано "-gettext" или
    "-multi_lang", то потребуется получить другую версию или собрать редактор
    с поддержкой этих компонентов.

Если необходимо получать сообщения программы на языке, который не совпадает с
языком на котором выводятся сообщения системы, то для этого есть несколько
способов, зависящих от возможности используемой системы.

Первый способ потребует установку значения переменной окружения в соответствии
с желаемым языком до запуска редактора Vim. Например, в UNIX-подобной системе
>
	env LANG=de_DE.ISO_8859-1  vim
<
Этот способ будет работать только в том случае, если язык доступен в системе.
Преимущество данного решения в том, что все сообщения графического интерфейса
и библиотек будут использовать корректные настройки языка. К возможным
недостаткам этого способа можно отнести то, что установку переменной окружения
необходимо выполнять до запуска редактора Vim.

Второй способ позволяет изменить язык сообщений во время работы редактора Vim
>
	:language fr_FR.ISO_8859-1
<
Этот способ даёт возможность попробовать указать различные названия языков.
Если язык не поддерживается в этой системе, то будет выведено сообщение об
ошибке. Если же сообщения программы не переведены на этот язык, то не будет
никаких уведомлений, в редакторе Vim будет использоваться английский язык.

Чтобы посмотреть, какие языки поддерживаются в системе, найдите каталог,
в котором они расположены. В системе, используемой автором, это
«/usr/share/locale». В других системах это может быть «/usr/lib/locale».
Относительно текущей системе смотрите в справочнике на странице «setlocale».

Будьте внимательны — название языка необходимо вводить в точности так, как оно
указано. Важен регистр символов, и следите за тем, чтобы не перепутать символы
'-' и '_'.

Помимо прочего, можно отдельно настраивать язык для сообщений, редактируемого
текста и формат вывода времени. См. описание команды |:language|.


КАК СДЕЛАТЬ ПЕРЕВОД СООБЩЕНИЙ

Если сообщения программы ещё не переведены на требуемый язык, то это можно
сделать самостоятельно. Для этого получите (скачайте) исходный текст редактора
Vim и пакет инструментов GNU gettext. Дальнейшие инструкции содержатся
в каталоге «src/po/README.txt» из архива с исходным кодом программы Vim.

Для того, чтобы подготовить перевод сообщений программы не требуется быть
программистом, и, в принципе, это не должно быть очень сложной процедурой.
Конечно, необходимо отлично знать язык, для которого выполняется перевод
сообщений, и хорошие познания в английском языке также пригодятся.

Если переводом получился удачным, то подумайте о том, чтобы поделиться им
с другими пользователям редактора Vim. Загрузите перевод на веб‐сайт домашней
страницы Vim (http://vim.sf.net) или отправьте перевод на электронную почту
координатору проекта Vim — <maintainer@vim.org>. Или сделайте и то, и то.

==============================================================================
*45.2*	Язык меню

Стандартный язык меню — английский. Чтобы меню программы отображались на
родном языке пользователя, то, естественно, файлы меню должны быть переведены
на этот язык. Подключение файлов с переводами меню обычно происходит
автоматически, если переменные окружения системы настроены соответствующим
образом. То есть это аналогично описанному выше для сообщений программы и не
требуется предпринимать каких‐то дополнительных действий. Так что всё будет
работать автоматически, если, конечно, существуют переведённые на требуемый
язык файлы меню.

Но давайте рассмотрим обратный вариант.
Предположим, что живя в Германии и используя в общении немецкий язык, но всё
же потребовалось, чтобы в меню отображалось «File» вместо привычного «Datei».
И вот чтобы переключить язык меню на английский язык, наберите такую команду
>
	:set langmenu=none
<
Либо можно установить голландский язык меню следующей командой
>
	:set langmenu=nl_NL.ISO_8859-1
<
Как описывалось в параграфе об языке сообщений программы, при указании языка
важно не перепутать символы "-" и "_". Но в данном случае различия в регистре
букв не имеют значения.

Параметр 'langmenu' должна быть установлен до загрузки файлов меню. После
загрузки меню изменение значения параметра 'langmenu' не оказывают прямого
действия. Поэтому, поместите команду установки языка меню в файл «vimrc».

Если действительно необходимо изменить язык меню уже после загрузки программы,
то это можно сделать следующим способом:
>
	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim
<
При этом все языки меню, которые вы указали сами будут удалены и вам придётся
переопределять их заново.


КАК СДЕЛАТЬ ПЕРЕВОД МЕНЮ

Чтобы посмотреть, для каких языков существуют переводы меню, проверьте каталог

    $VIMRUNTIME/lang ~

Файлы с переводом текста меню называются «menu_{язык}.vim». Если требуемого
языка меню нет, то можно сделать собственный перевод. Самый простой способ
это сделать — скопировать файл для одного из уже существующих языков и внести
необходимые изменения.

Прежде всего потребуется выяснить правильное название языка с помощью команды
":language". Используйте это название, но набирайте его строчными буквы. Затем
скопируйте файл в каталог с настройками редактора Vim, который указан в начале
списка, хранящегося в параметре 'runtimepath'. Например, в UNIX-подобных
системах можно воспользоваться командой
>
    :!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim \
	~/.vim/lang/menu_nl_be.iso_8859-1.vim
<
Ряд полезных советов для переводчиков содержится в файле
«$VIMRUNTIME/lang/README.txt».

==============================================================================
*45.3*	Использование других кодировок

При загрузке файла в редактор Vim предполагается, что кодировка текста
соответствует языку документа. Для большинства европейских языков такой
кодировкой является кодировка «latin1» (ISO-8859-1). В этой кодировке каждый
байт соответствует одному символу. Иными словами, для выбора доступно 256
различных символов. А вот для восточно‐азиатских языков этого явно
недостаточно, и для этих языков, как правило, используется двубайтовое
кодирование символов, предоставляя возможность выбора из более чем десятка
тысяч символов. Тем не менее это тоже не является достаточно хорошим решением,
особенно тогда, когда в документе присутствует текст на нескольких языках.
Вот в этих случаях на помощь приходит новый стандарт под названием Unicode.
Стандарт Unicode (читается как «Юникод» или реже «Уникод») был разработан
таким образом, чтобы включать все возможные символы из множества языков мира.
Это «сверхкодировка, которая заменит все остальные кодировки». Но, к сожалению,
она пока ещё недостаточно распространена [возможно, что здесь имеется ввиду
первоначальная дата составления документации — примеч. перевод.]

Но к нашему счастью в редакторе Vim поддерживаются все три типа кодировок.
Можно использовать их даже в тех случаях, когда системное окружение настроено
на работу с языком, различающемся от применяемого в тексте документа. Правда
поддерживается это с некоторыми ограничениями.

В большинстве случаев, если редактируется файл в кодировке являющейся
естественной для языка документа, то навряд ли придётся предпринимать какие‐то
дополнительные действия. Настройки по умолчанию должны нормально справиться со
своей задачей. Приведённая в этом параграфе информация необходима лишь тогда,
когда сталкиваетесь с редактированием файлов на других языках или кодировках.


ИСПОЛЬЗОВАНИЕ UNICODE В ГРАФИЧЕСКОМ ИНТЕРФЕЙСЕ

Чем хороша кодировка Unicode, так это тем, что другая кодировка может быть
преобразована в Unicode и обратно без потери информации. При настройке
редактора Vim на использование Unicode в качестве внутренней кодировки,
возможно редактирование файлов в любой другой кодировке.

К сожалению, количество систем, которые поддерживают Unicode, до сих пор
ограничено. Поэтому используемый в системе язык скорее всего не поддерживает
Unicode [на дату перевода есть изменения в лучшую сторону — примеч. перевод.].
Чтобы внутренней кодировкой редактора Vim был Unicode и при этом сохранялся
способ взаимодействия с системой, потребуется сделать некоторые настройки.

Начнём с версии редактора Vim с графическим интерфейсом, которая позволяет
отображать символы в кодировке Unicode. Для этого введите следующие команды:
>
	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
<
Через параметр 'encoding' задаётся используемую редактором Vim кодировка
символов. Она будет применена к тексту в буферах (файлы, которые редактируются),
регистрам, командным файлам Vim и т. д. Параметр 'encoding' это настройка для
всех внутренних систем редактора.

Наш пример предполагает, что в системе имеется указанный шрифт. Наименование,
указанное в нашем примере, применимо к X Window System. Этот шрифт содержится
в программном пакете, который позволяет xterm поддерживать Unicode. Если этот
шрифт отсутствует в системе, то его можно загрузить из Интернет по адресам:

	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~
	https://github.com/halferty/ucs-fonts

В MS Windows некоторые шрифты также имеют определённый набор символов Unicode.
Попробуйте использовать шрифт «Courier New» [для Windows я рекомендую шрифт
«Consolas» — примеч. перевод.]. Впрочем, можете воспользоваться меню Правка
пункт Шрифты... для выбора и проверки шрифтов. Учтите, что в редакторе Vim
можно использовать только моноширинные шрифты. Пример команды для назначения
шрифта
>
	:set guifont=courier_new:h12
<
Если вдруг что‐то не получается, попробуйте загрузить пакет с дополнительными
шрифтами. Если только Microsoft опять не перепрятала этот пакет, то его можно
найти по этому адресу

	http://www.microsoft.com/typography/fonts/default.aspx ~

Теперь необходимо настроить редактор Vim на использование для всех внутренних
целей кодировку Unicode и применять для отображения текста шрифт с поддержкой
Unicode. Дело в том, что вводимые с терминала символы поступают в редактор в
кодировке оригинального языка. В редакторе Vim эти символы должна быть
преобразованы в кодировку Unicode. Кодировка, из которой редактор переводит
символы, указывается с помощью параметра 'termencoding'. Настроить эти
параметры можно так:
>
	:let &termencoding = &encoding
	:set encoding=utf-8
<
По первой команде будет выполнено присвоение параметру 'termencoding'
предыдущего значения параметра 'encoding' до того, как параметру 'encoding'
будет присвоено значение «utf-8» во второй команде. Попробуйте выполнить эти
команды, чтобы проверить работает ли это на вашей системе. Особенно хорошо это
должно действовать в тех случаях, когда используется методом ввода для
восточного‐азиатских языков или когда редактируете текст в кодировке Unicode.


ИСПОЛЬЗОВАНИЕ КОДИРОВКИ UNICODE В ТЕРМИНАЛЕ С ПОДДЕРЖКОЙ UNICODE

Некоторые терминалы напрямую поддерживают кодировку Unicode, в том числе
стандартный терминал xterm из пакета XFree86. Мы будем использовать этот
терминал в качестве примера для наших настроек.

Прежде всего убедитесь, что терминал xterm скомпилирован с поддержкой Unicode.
Чтобы это проверить, обратитесь к разделу |UTF8-xterm| и, если потребуется, то
повторно скомпилируйте терминал xterm.

Запустите терминал xterm с аргументом «-u8». Также может потребоваться указать
необходимый шрифт. Например,
>
   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1
<
Теперь можно запустить в терминале редактор Vim. Установите значение параметра
'encoding' равным «utf-8», как было показано выше. И это всё, что потребуется.


ИСПОЛЬЗОВАНИЕ КОДИРОВКИ UNICODE В ОБЫЧНОМ ТЕРМИНАЛЕ

Предположим, что требуется работать с файлами в кодировке Unicode, но
используемый терминал не поддерживает Unicode. С помощью редактора Vim
возможно выполнить работу и в таких условиях, но символы, которые не могу быть
показаны на таком терминале, отображаться не будут. Однако общий вид текста
будет сохранён.
>
	:let &termencoding = &encoding
	:set encoding=utf-8
<
Это те же самые настройки, которые мы использовали для графического
интерфейса, но работать они будут иначе — в редакторе Vim будет выполняться
перекодировка текста перед отправкой на терминал. Благодаря этому на экране
отобразится обычный текст, а не каша из символов.

Для этого должна быть возможность преобразование между кодировкой из параметра
'termencoding' и кодировкой из 'encoding'. В редакторе Vim всегда выполняется
внутреннее преобразование из кодировки «latin1» в кодировку Unicode.
Для других перекодировок редактор Vim должен быть собран с компонентом |+iconv|.

Попробуйте отредактировать файл с кодировкой Unicode. Обратите внимание, что
на месте тех символов, которые не могут быть отображены на обычном терминале,
будет показан знак вопроса (или символ подчёркивания, или ещё какой-либо
символ). Установите каретку на такой знак вопроса и наберите команду
>
	ga
<
В редакторе Vim будет показан код этого символа в строке состояния. Этот код
служит подсказкой о том, что это за символ. Можно, например, посмотреть этот
символ в таблице Unicode по его коду. Если вам больше нечем заняться,
то можете просмотреть так весь файл.

    Примечание.
    Поскольку параметр 'encoding' используется для текста внутри реактора,
    то изменение его значения приведёт к тому, что весь текст не входящий
    в кодировку ASCII будет искажён. Это будет также заметите при
    использовании регистров и файла «viminfo», например, в журнале шаблонов
    поиска. Поэтому, рекомендуется настроить параметр 'encoding' в файле
    «vimrc» и постараться его больше не менять.

==============================================================================
*45.4*	Редактирование файлов в другой кодировке

Мы имеем настроенный редактор Vim на работу с кодировкой Unicode и теперь
требуется отредактировать файл в котором используется 16‐битная схема
кодирования Unicode. На первый взгляд всё просто и не должно быть каких‐то
сюрпризов. Но дело в том, что в редакторе Vim в качестве внутренней схемы
кодирования используется формат передачи Unicode UTF-8, поэтому 16‐битная
схема кодирования должна быть сначала преобразована. То есть, существует
различие между форматами передачи набора символов (Unicode) при кодировании
этих самых символов (UTF-8 и UTF-16).

При работе с файлами, механизмы, реализованные в редакторе Vim будут пытаться
выполнить распознавание текущей кодировки файла, опираясь на те значения,
которые указанны в параметре 'fileencodings'. Значения «ucs-bom», «utf-8» и
«litin1» устанавливаются по умолчанию при настройке работы редактора Vim с
кодировками Unicode. То есть, файл будет проверяться на соответствие одной из
этих трёх кодировок.

	ucs-bom		Файл должен начинаться с метки порядка байт (Byte
			Order Mark, BOM). Позволяет распознавать 16-битные,
			32-битные и utf-8 кодировки Unicode.
	utf-8		Формат передачи Unicode UTF-8. Эта установка
			отвергается, если последовательность байт недопустима
			для UTF-8.
	latin1		Старая добрая 8-битная кодировка, работает почти во
			всех случаях.

При редактировании файла с 16‐битной кодировкой Unicode в котором присутствует
метка порядка байт (МПБ), то редактором Vim это будет распознано при
считывании и выполнено преобразование в формат передачи Unicode UTF-8.
Одновременно будет установлен параметр 'fileencoding' (без конечной буквы «s»)
в распознанное значение «utf-16le» (что означает 16‐битный формат
передачи Unicode с обратным порядком байт — от младшего к старшему). Этот
формат является общим и наиболее популярным в MS Windows, например, в файлах
регистра.

Во время операции записи файла в редакторе Vim выполняется сравнение значения
параметров 'fileencoding' и 'encoding'. И если они различаются, то текст будет
преобразован в исходный формат.

Когда значение параметра 'fileencoding' не установлено, подразумевается что
преобразования форматов не требуется, и кодировкой текста считается значение,
указанное в параметре 'encoding'.

Если используемые по умолчанию значения кодировок параметра 'fileencodings' не
отвечают требуемым при работе с различными файлами, то укажите те кодировки,
которые должен пытаться распознать редактор Vim для открываемых файлов.
Учтите, что кодировки применяются в порядке их перечисления в параметре.
То есть следующее значение в списке будет применяться только тогда, когда
предыдущее значение не сработало. Исходя из этого, никогда не указывайте
кодировку «latin1» первой в списке, ведь эта кодировка будет считаться
действительной практически для любого открываемого файла.
Далее пример для файла японского языка, в тех случаях, когда в начале файла
отсутствует МПБ, а для текста не используется UTF-8
>
	:set fileencodings=ucs-bom,utf-8,sjis
<
См. список кодировок в справочнике, раздел |encoding-values|. Также, в
зависимости от доступных в системе инструментов преобразования, могут работать
и другие значения.


ПРИНУДИТЕЛЬНАЯ УСТАНОВКА КОДИРОВКИ

В случае, если автоматическое определение кодировки не сработало, то необходимо
вручную указать редактору Vim, в какой кодировке записан файл. Пример,
>
	:edit ++enc=koi8-r russian.txt
<
Через аргумент «++enc» указывается наименование кодировки, которая будет
использоваться редактором только для редактирования данного файла. В редакторе
Vim будет выполнено преобразование файл из указанной кодировки, в данном
случае это кодировка «KOI8-R», в кодировку, указанную в параметре 'encoding'.
Одновременно с этим будет установлено значение и в параметре 'fileencoding',
чтобы при записи файла выполнить обратное преобразование.

Такой же в точности аргумент можно использовать и при записи файла. Иными
словами, можно преобразовать файл из одной кодировки в другую с помощью самого
редактора Vim. Пример,
>
	:write ++enc=utf-8 russian.txt
<
    Примечание.
    Преобразование может привести к потере информации. Преобразование из
    какой-либо кодировки в Unicode и обратно почти отсутствуют такие случаи,
    если только в тексте не содержатся символы, которых нет в той или иной
    кодировке. Преобразование из Unicode в другие кодировки часто приводит
    к потере информации в тех ситуациях, когда в файле представлено несколько
    языков.

==============================================================================
*45.5*	Ввод текста на других языках

Клавиатура компьютера обычно имеет сто с небольшим клавиш. В некоторых языках
имеются тысячи символов, в кодировке Unicode их более десятки тысяч. Как можно
вводить все эти символы?

Ну прежде всего, если в работе используются лишь некоторое специальные символы,
можно задействовать диграфы. Подробнее об этом читайте в параграфе |24.9|.

Если же набор текста происходит на языке, в котором имеется намного больше
символов, чем имеется на клавиатуре, то в этом случае будет иметь смысл
воспользоваться так называемым «методом ввода» (Input Method, IM). Для этого
придётся изучить каким образом преобразуется нажатие нескольких клавиш в
отдельный символ в том или ином методе ввода. Если требуется использование
метода ввода, то, скорее всего, этот инструмент уже присутствует в системе.
Метод ввода должен работать в редакторе Vim так же, как и в любой другой
программе. Подробности смотрите в соответствующих разделах справочника:
|mbyte-XIM| для X Window System и |mbyte-IME| для MS Windows.


РАСКЛАДКА КЛАВИАТУРЫ

В некоторых языках используется набор символов, отличающийся от латинского,
но количество символов в них примерно то же самое. Это позволяет создать
раскладку клавиатуры с символами этого языка. В редакторе Vim для этого
использует механизм под названием «keymap».

Предположим, требуется ввести текст на иврите. И для этого надо всего лишь
подключить к редактору Vim раскладку клавиатуры на этом языке простой командой
>
	:set keymap=hebrew
<
После ввода этой команды будет предпринята попытка найти требуемый файл с
раскладкой клавиатуры. На успешный результат поиска также влияет значение
параметра 'encoding'. Если соответствующий файл не удастся найти, то будет
выведено сообщение об ошибке.

После того, как файл с раскладкой клавиатуры будет подключен к редактору Vim,
можно будет вводить текст на иврите в режиме вставки. А для режима команд и
режима командной строки будет выполнено автоматически переключение на
английский язык. Чтобы выполнить переключение между вводом символов на иврите
и английским, необходимо воспользоваться командой
>
	CTRL-^
<
Переключение языков ввода по этой команде действует только для режима вставки
и режим командной строки. В режиме команд эта команда выполняет совершенно
иную функцию (выполняется переход к соседнему файлу).

При использовании раскладки клавиатуры в данный момент будет соответствующая
индикация в строке состояния (если активирован параметр 'showvode'). В версии
редактора Vim с графическим интерфейсом на использование раскладки клавиатуры
указывает изменение цвета каретки.

Применение между раскладками клавиатуры можно также настраивать с помощью
параметров 'iminsert' и 'imsearch'.

Для просмотра перечня сопоставления клавиш в раскладке, используйте команду
>
	:lmap
<
Чтобы в графическом интерфейсе просмотреть доступные раскладки клавиатуры,
откройте меню Правка пункт Раскладки клавиатуры.

А при работе в консоли для этого воспользуйтесь командой
>
	:echo globpath(&rtp, "keymap/*.vim")
<

КАК СДЕЛАТЬ РАСКЛАДКУ КЛАВИАТУРЫ

На самом деле создание собственной раскладки клавиатуры не такая сложная вещь.
Воспользуйтесь в качестве образца файлом раскладки, похожей на нужный язык.
Скопируйте этот файл в каталог «keymap» внутри каталога с файлами настроек
редактора Vim. Например, в UNIX-подобных системах это может быть каталог 
«~/.vim/keymap».

Наименование файла с раскладкой клавиатуры должно выглядеть так

    keymap/{название}.vim ~
или так
    keymap/{название}_{кодировка}.vim ~

Где {название} — это наименование самой раскладки. Выбирайте такое название,
которое сразу укажет, о чём идёт речь, но в то же время отличное от
существующих файлов раскладки (если только не планируете заменить уже
существующий файл раскладки). Обратите внимание, что {название} не должно
содержать символ подчёркивания. При желании можно добавить указание
используемой кодировки. Например,

    keymap/hebrew.vim ~
    keymap/hebrew_utf-8.vim ~

Содержание файла говорит само за себя. Просмотрите файлы раскладок, включённые
в комплект поставки редактора Vim. Подробности читайте в разделе |mbyte-keymap|.


ПОСЛЕДНЯЯ НАДЕЖДА

Если все остальные методы не увенчались успехом, то можно вводить любой символ
с помощью клавиатурной команды CTRL-V:

	кодировка  ввод			диапазон символов ~
	8-бит	   CTRL-V 123		десятичные 0-255
	8-бит	   CTRL-V x a1		шестнадцатеричные 00-ff
	16-бит     CTRL-V u 013b	шестнадцатеричные 0000-ffff
	31-бит	   CTRL-V U 001303a4	шестнадцатеричные 00000000-7fffffff

Не вводите пробелы, здесь это сделано для наглядности.
Подробнее см. в |i_CTRL-V_цифра|.

==============================================================================

Следующая глава «Расширенные возможности командных файлов Vim, |usr_50.txt|.
Об авторских правах на документацию см. |manual-copyright|.

© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

 vim:tw=78:ts=8:noet:ft=help:norl:
