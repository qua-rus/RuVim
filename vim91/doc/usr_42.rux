*usr_42.txt*	для Vim version 9.1		   редакция от 05 мая 2008 г.

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		      Создание и изменение пунктов меню


Как уже говорилось, редактор Vim весьма гибкий инструмент в плане настроек под
конкретные нужды пользователя. Это также относится и к такому функционалу как
меню графического интерфейса программы. Можно даже определять собственные
пункты меню для лёгкого доступа к каким-либо командам. Такая возможность
будет, наверное, полезна для тех, кто привык работать с манипулятором «мышь».

|42.1|	Введение
|42.2|	Команды меню
|42.3|	Прочее
|42.4|	Панель инструментов и всплывающие меню

 Следующая глава «Работа с различными типами файлов», |usr_43.txt|.
Предыдущая глава «Встроенный язык программирования», |usr_41.txt|.
      Содержание, |usr_toc.txt|.

==============================================================================
*42.1*	Введение

Меню, используемые в редакторе Vim, определены в файле «$VIMRUNTIME/menu.vim».
Если потребуется создать свои собственные меню, то прежде всего просмотрите
как устроен этот файл.

Для определения пункта меню используется команда ":menu". Общий вид этой
команды такой:
 >
	:menu {меню.пункт} {действия}
<
где параметр {меню.пункт} описывает, в каком месте меню следует поместить
данный пункт.
Типичный пример для параметра {меню.пункт} — «Файл.Сохранить», задаёт пункт
«Сохранить» в меню «Файл». Для разделения наименований меню используется
символ точка. Пример.
>
	:menu Файл.Сохранить  :update<CR>
>
По команде ":update" на диск будет записано содержимое буфера в том случае,
если оно было изменено.

Возможно создание дополнительного уровня вложенности в уже существующем меню.
Например, запись «Правка.Параметры\ текущего\ буфера.Ширина\ отступа»
определяет пункт «Ширина отступа» в подменю «Параметры текущего буфера» меню
«Правка». Можно указывать и более глубокие уровни меню, главное следить, чтобы
этим было удобно пользоваться.

Команда ":menu" очень похожа на команду ":map" — в левой части описывается
что будет выполнено, а в правой части указывается последовательность, которая
реализует это действие.
Параметр {действия} — это последовательность символов, которые будут
обработаны точно так же, как если бы их набирали на клавиатуры. Поэтому, если
редактор находится в режиме вставки, а {действия} это обычный текст, то он
будет вставлены напрямую в буфер.


КЛАВИШИ БЫСТРОГО ДОСТУПА

Чтобы обозначить алфавитно‐цифровую клавишу клавиатуры, при нажатии которой
будет вызван требуемый пункт меню, добавьте символ амперсанд (&) перед
соответствующим символом в наименовании пункта меню. Иными словами,
{меню.пункт} возможно записать как «&Файл.&Сохранить». Тогда, для выбора меню
«Файл» можно последовательно нажать клавиши <ALT> и <Ф>, а затем вызвать пункт
«Сохранить», нажав клавишу <С> (такое поведение может быть изменено через
параметр 'winaltkeys'!). Клавиша быстрого доступа, используемая для пункта
меню, будет подчёркнута в наименовании этого пункта.

Обратите внимание, что клавиши быстрого доступа для каждого меню должны быть
уникальны. В противном случае будет неопределённость какой из пунктов меню на
самом деле необходимо вызвать. В редакторе Vim никаких предупреждений в этом
случае не выдаётся.


ПРИОРИТЕТЫ

В действительности определение меню Файл.Сохранить выглядит так:
>
	:menu 10.340 &Файл.&Сохранить<Tab>:w  :confirm w<CR>
<
Номер 10.340 называется числовым приоритетом. Оно используется редактором для
определения местоположения меню. Первая часть номера, в нашем примере это 10,
указывает на положение в строке меню. Меню с меньшим номером расположены ближе
к левому краю, с большими — к правому краю строки меню.

Ниже показаны приоритеты, которые используются для стандартных меню:

      10	20        40           50         60      70	    9999

    +-----------------------------------------------------------------------+
    | Файл    Правка    Сервис    Синтаксис    Буферы    Окно	    Справка |
    +-----------------------------------------------------------------------+

Обратите внимание, что для меню «Справка» используется очень большой номер,
это сделано для того, чтобы оно всегда было последним справа.

Вторая часть номера, в нашем примере это 340, определяет положение пункта
внутри меню. Пункт с меньшим номером располагаются выше к началу меню,
а с большим — ближе к концу. Вот стандартные приоритеты пунктов в меню «Файл»:

			+-----------------------------------+
	    10.310	|Открыть...	                    |
	    10.320	|Открыть в новом окне...	    |
	    10.320	|Открыть в новой вкладке...	    |
	    10.325	|Создать		            |
	    10.330	|Закрыть		            |
	    10.335	|---------------------------------- |
	    10.340	|Сохранить		            |
	    10.350	|Сохранить как...	            |
	    10.400	|---------------------------------- |
	    10.410	|Сравнить с...                      |
	    10.420	|Сравнить и исправить...	    |
	    10.500	|---------------------------------- |
	    10.510	|Печать...		            |
	    10.600	|---------------------------------- |
	    10.610	|Сохранить и выйти	            |
	    10.620	|Выход		                    |
			+-----------------------------------+

Обратите внимание, что используется непоследовательная нумерация чисел, а с
определённым шагом. Это позволяет вставить дополнительные пункты между уже
существующими пунктами меню. Однако, зачастую лучше не изменять стандартные
меню, а добавить собственное меню для своих специфических целей.

При создании подменю можно добавить другой ".номер" приоритета. Таким образом,
каждый такой пункт в {меню.пункт} будет иметь собственный приоритет.


СПЕЦИАЛЬНЫЕ СИМВОЛЫ

В нашем примере параметр {меню.пункт} записан как «&Файл.&Сохранить<Tab>:w».
И здесь нужно сделать важное замечание — параметр {меню.пункт} должен
записываться в одно слово, без пробельных символов. Если необходимо поместить
символы точка, пробел или табуляция в названии меню, то требуется либо
воспользоваться соглашением о записи в треугольных скобках <> (например,
<Space> или <Tab>), либо экранировать эти символы при помощи обратной
наклонной черты (\). Как это показано в следующем примере.
>
	:menu 10.350 &Файл.Со&хранить\ как\.\.\. :browse confirm saveas<CR>

В данном случае определён пункт меню «Сохранить как...», содержащий пробел и
указывающий на выполнение команды ":browse confirm saveas<CR>".

Обозначение <Tab> при записи пункта меню используется для разделения
собственно названия пункта и подсказки для пользователя. Часть, которая в
записи следует после <Tab> выровняется по правому краю меню. Например, для
меню Файл.Сохранить используется запись «&Файл.&Сохранить<Tab>:w». Тогда
получается, что наименование меню — это «Файл.Сохранить», а подсказка — `:w`.


РАЗДЕЛИТЕЛИ

Разделители, используемые для группирования связанных по смыслу пунктов меню,
задаются словом, которое начинается с символа '-' и заканчиваются также
символом '-'. Например, «-sep-». При использовании нескольких разделителей,
их наименования должны различаться. Во всех остальных отношениях само слово
используемое как наименование не имеет значения.

Команда, указанная в пункте меню разделителя никогда не выполняется, но все
равно должна быть задана. Достаточно указать символ двоеточие. Пример,
>
	:amenu 20.510 Редактировать.-sep3- :
<
==============================================================================
*42.2*	Команды меню

В программе предусмотрена возможность определять пункты меню для конкретных
режимов работы редактора. Названия команд похожи на варианты команды ":map"

	:menu		режим команд, визуальный и режим ожидания оператора
	:nmenu		режим команд
	:vmenu		режим визуальный
	:omenu		режим ожидания оператора
	:menu!		режим вставки и режим командной строки
	:imenu		режим вставки
	:cmenu		режим командной строки
	:tlmenu		режим терминала
	:amenu		все режимы

Чтобы избежать переопределения команд, назначенных внутри меню, пользуйтесь
командами ":noremenu", ":nnoremenu", ":anoremenu" и т. п.


ИСПОЛЬЗОВАНИЕ :AMENU

Команда ":amenu" немного отличается от остальных команд. Дело в том, что она
предполагает, что указанные {действия} выполняется в режиме команд. Если
редактора Vim находится в визуальном режиме или в режиме вставки, то для
исполнения команды в этом меню, прежде всего будет выполнено переключение
в режим команд.
По команде ":amenu" автоматически выполняются клавиатурные команды CTRL-C или
CTRL-O. Например, если имеется такая команда меню
>
	:amenu  90.100 Моё.Найти\ слово  *

то будут выполнены следующие команды, в зависимости от режима редактора:

	режим команд			*
	режим визуальный		CTRL-C *
	режим ожидания оператора	CTRL-C *
	режим вставки			CTRL-O *
	режим командной строки		CTRL-C *

В режиме командной строки по клавиатурной команде CTRL-C прерывается набор
команды. В визуальном режиме или в режиме ожидания по CTRL-C будет выполнено
завершение этого режима. В режиме вставки по клавиатурной команде CTRL-O
выполняется одна команда режима команд и происходит возврат в режим вставки.

Клавиатурная команда CTRL-O работает только для одной команды режима команд.
Если надо использовать несколько таких команд, то поместите их в функцию и
используйте вызов этой функции.
Пример.
>
	:amenu  Моё.Следующий\ файл  :call <SID>NextFile()<CR>
	:function <SID>NextFile()
	:  next
	:  1/^Code
	:endfunction
>
По команде данного меню будет выполнен переход к следующему файлу в перечне
аргументов по команде ":next", и поиск строки, начинающейся со слова «Code».

Приставка <SID> перед наименованием функции — идентификатор сценария. Это
позволяет сделать эту функцию локальной для данного командного файла Vim и
избежать проблем, связанных с объявлением функции с тем же наименованием в
другом командном файле Vim. Подробности см. |<SID>|.


НЕМЫЕ МЕНЮ

Меню выполняет {действия} так, как будто это было набрано непосредственно на
клавиатуре. Для команд, начинающихся с ":" (Ex-команд) это означает, что
команда будет отображаться в командной строке. Если она превышает длину
командной строки, появится запрос нажать клавишу <ENTER>, что может быть очень
некрасиво.

Чтобы этого избежать, сделайте такое меню "немым". Этого можно добиться с
помощью аргумента <silent>. Например, в предыдущем примере используется вызов
функции NextFile(). При выборе этого пункта меню в командной строке появится

    :call <SNR>34_NextFile() ~

Чтобы этот текст не отображался в командной строке, добавьте аргумент <silent>
>
	:amenu <silent> Моё.Следующий\ файл :call <SID>NextFile()<CR>
<
Не используйте аргумент <silent> слишком часто. Для коротких команд в нём нет
необходимости. При выборе пункта меню отображение команды в командной строке
даёт некоторую подсказку о том, что пришлось бы набирать пользователю вручную
вместо простого нажатия кнопки манипулятора «мышь».


ПРОСМОТР СУЩЕСТВУЮЩИХ МЕНЮ

Если команда меню указывается без параметра {действия}, то будет выведен
перечень уже созданных меню. Можно указать запись {меню.пункт} или его часть,
чтобы просмотреть только указанные меню. Например, по команде
>
	:amenu
<
будет выведен перечень всех существующих меню. Это будет большой перечень!
Лучше указать название определённого меню, чтобы сократить этот перечень
>
	:amenu Правка
<
По этой команде будут показаны только пункты меню «Правка» для всех режимов.
Чтобы посмотреть только определённый пункт меню доступный в режиме вставки
>
	:imenu Правка.Отменить
<
Будьте внимательны при вводе наименования. Регистр символов имеет значение,
но можно не указывать символ '&' задающий клавишу быстрого доступа, а также
можно опускать обозначение <Tab> и всё, что следует после него.


УДАЛЕНИЕ МЕНЮ

Для удаления меню применяется та же команда, что и для просмотра, только
вместо «menu» используется «unmenu». Иными словами, вместо команды ":menu"
должна быть ":unmenu", вместо ":nmenu" должна быть команда ":nunmenu" и т. п.
Пример для удаления пункта «Сервис.Сделать» в режиме вставки редактора
>
	:iunmenu Сервис.Сделать
<
Можно вообще полностью удалить всё меню целиком
>
	:aunmenu Синтаксис
<
По этой команде будет удалено меню «Синтаксис» вместе со всеми его пунктами.

==============================================================================
*42.3*	Прочее

Можно изменять вид меню посредством флагов параметра 'guioptions'.
По умолчанию установлены все флаги за исключением флага «M». Убрать тот или
иной флаг можно при помощи команды вроде
>
	:set guioptions-=m
<
	m	Если флаг не установлен, то строка меню не отображается.

	M	Если флаг установлен, то стандартное меню не загружается.

	g	Если флаг не установлен, то неактивные пункты будут удалены из
		меню вместо подсветки их серым цветом (работает не во всех
		системах).

	t	Если флаг не установлен, то меню будут "неотрывными".

Пунктирная линия в самом верху любого меню это не разделитель, а обозначение
специальной возможности, доступной для меню. При выборе этого элемента меню
становится "отрывным", т. е. такое меню отображается в отдельном окне.
Это бывает удобно, если часто применяются пункты из одно и того же меню.

О переводе пунктов меню на другие языки см. |:menutrans|.

Поскольку для выбора меню используется манипулятор «мышь», то было бы удобно
для указания файла воспользоваться системным диалогом открытия файла,
вызываемый по команде ":browse", а вместо вывода сообщения об ошибке, например
при несохранённых изменениях в текущем буфере, отображать запрос при помощи
команды ":confirm". Все эти команды можно объединять вместе
>
	:amenu Файл.Открыть  :browse confirm edit<CR>
<
По команде ":browse" будет открыто системное диалоговое окно для выбора файла,
а по команде ":confirm" — для подтверждения действий при наличии в буфере
несохранённых изменений. Где будут предложены варианты сохранить или нет
изменения, или отказа от выполнения команды.

Для расширенной обработки можно применять функции confirm() и inputdialog().
В файле меню, поставляемом с редактором Vim, есть примеры использования этих
функций.

==============================================================================
*42.4*	Панель инструментов и всплывающие меню

В редакторе Vim имеется также два специальных меню — это ToolBar и PopUp.
Записи, которые начинаются с этих названий, недоступны в обычной строке меню.


ПАНЕЛЬ ИНСТРУМЕНТОВ

Панель инструментов отображается только в том случае, если в параметре
'guioptions' указан флаг 'T'.

Панель инструментов использует для представления команды в виде кнопки со
значком вместо текста. Например, запись {меню.пункт} в виде «ToolBar.Новый»
указывает на отображение кнопки со значком «Новый» на панели инструментов.

В редакторе Vim имеется 31 встроенных значков. Полная таблица представлена
здесь — |builtin-tools|. Большая их часть используется в стандартной
панели инструментов. После загрузки основного меню, можно переопределить
значение этих элементов.

Также можно назначить собственный значок для кнопки на панели инструментов.
Или определить новую кнопку панели инструментов с тем или иным значком.
Например, определим новую кнопку панели инструментов при помощи следующих
команд:
>
	:tmenu ToolBar.Compile  Компилировать текущий файл
	:amenu ToolBar.Compile  :!cc %:S -o %:r:S<CR>
<
И также потребуется создать значок. Для MS Windows изображение значка должно
быть в формате BMP, а наименование файла в данном случае будет «Compile.bmp».
В UNIX‑подобных системах используется формат XPM, а наименование файла будет
«Compile.xpm». Размер изображения должен быть 18 на 18 пикселов. В MS Windows
можно использовать и другой размер, но это будет некрасиво выглядеть.

Файл с изображением следует поместить в каталог «bitmaps» в одном из каталогов,
указанных в параметре 'runtimepath'. Например, для UNIX‑подобных систем это
может быть "~/.vim/bitmaps/Compile.xpm".

Возможно назначить подсказку для кнопки на панели инструментов. Такая
подсказка является кратким текстом, поясняющим смысл данной кнопки на панели
инструментов, например, «Открыть файл». Подсказка появляется, когда указатель
манипулятора «мышь» задерживается на некоторое время над той или иной кнопкой.
Это особенно полезно, если значение кнопки не сразу понятно по изображению.
Пример.
>
	:tmenu ToolBar.Make  Запуск программы make в текущем каталоге
<
    Примечание.
    Обращайте внимание на используемый регистр символов. Названия «Toolbar»
    и «toolbar» это обычные пункты меню, а для панели инструментов нужно
    использовать именно «ToolBar»!

Для удаления подсказки используйте команду |:tunmenu|.

Через параметр 'toolbar' можно настроить показ на панели инструментов текста
вместо значков или совместное отображение текста и значков. Большинство людей,
впрочем, предпочитают только значки, поскольку текст занимает много места.


ВСПЛЫВАЮЩЕЕ МЕНЮ

Всплывающее меню появляется под указателем манипулятора «мышь». В MS Windows
оно вызывается по нажатию на правую кнопку манипулятора. Чтобы активировать
необходимый пункт меню, установите на нём указатель и нажмите левую кнопку
«мышь». В UNIX-подобных системах всплывающее меню вызывается и используется
при помощи нажатия и удерживания правой кнопки манипулятора «мышь».

Всплывающее меню будет доступно только в том случае, если значением параметра
'mousemodel' является «popup» или «popup_setpos». Различие между этими двумя
значениями состоит в следующем: при значении «popup_setpos» будет выполнено
перемещение каретки в позицию указателя «мышь» при вызове всплывающего меню.
Если нажатие кнопки манипулятора происходит в выделенной области, то эта
область будет использоваться без изменений, но если нажатие кнопки будет за
пределами выделенной области, то выделение с области будет снято.

Для каждого режима редактора существует собственное всплывающее меню, поэтому
в таких меню никогда не бывает неактивных пунктов, в отличие от обычного меню.

В чём смысл жизни, Вселенной и вообще всего на свете?                     *42*

Дуглас Адамс, единственный человек, который понимал, о чем именно этот вопрос,
уже, к сожалению, умер. Так что можете спросить себя: а в чём смысл смерти?...

==============================================================================

Следующая глава «Работа с различными типами файлов», |usr_43.txt|.
Об авторских правах на документацию см. |manual-copyright|.

© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

 vim:tw=78:ts=8:noet:ft=help:norl:

